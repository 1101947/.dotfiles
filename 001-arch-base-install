Arch-linux-ssh-install-lvm-encrypt-uefi-grub-hibernation

by  1101947
link https://github.com/1101947/.dotfiles
date 2018-03-12
based on mattiaslundberg
link https://gist.github.com/mattiaslundberg/8620837

This command order will leave you with a fresh installed arch base console-only system with the following specifications, optimized for my needs. You can simply change/add/delete what you whant.
- UEFI with GRUB boot loader
- single GPT disk with unencrypted boot partition, encrypted lvm partition, containig root and swap (change it's size as you need) volumes without a separate home partition or volume
- Russian locale, console font and timezone (change it to your's)
- ready for properly working hibernation
- installation is made via ssh connection to simplify coping and pasting commands on GUI based machine (you can simply miss steps needed to esteblish ssh connection)

WARNING! Read carefully before enter any command. This WILL DESTROY YOUR DATA! Please, backup what matters for you. A good way to try - use virtual machine.

# The official installation guide (https://wiki.archlinux.org/index.php/Installation_Guide) contains a more verbose description.

# Download the archiso image from https://www.archlinux.org/
# Copy to a usb-drive
dd if=archlinux.img of=/dev/sdX bs=16M && sync # on linux

# Boot from the usb. If the usb fails to boot, make sure that secure boot is disabled in the BIOS configuration.

# To install Arch Linux you need internet connection. if you have a wired connection, it will start automatically 

# If you have only wireless connections, connect to network with wifi-menu 
wifi-menu

# Check internet connection
ping -c 4 www.google.com

# We’ll make installation procedure via ssh connection. This gives us advantage of using copy and paste commands. On Windows you can use Putty application for this purpose. On Mac or Linux use terminal. Before that set root password or ssh connetcion wouldn’t work. This password will exist only during installation. You don't need to use a strong one.
passwd 
 type your temporary password, Enter

# Enable ssh 
systemctl start sshd

#Discover ip adress to connect
ip addr | grep "scope global"
#Ip will be written just after «inet»

# On remote computer type in terminal (or putty on Windows)
ssh root@your_ip
# type “yes” and enter your root password
# That’s all! Now you are able to copy and paste any command from remote machine

# Remove old partition table
sgdisk --zap-all /dev/sda

# Create partitions
cgdisk /dev/sda
1 100MB EFI partition # Hex code ef00
2 250MB Boot partition # Hex code 8300
3 100% size partiton # (to be encrypted) Hex code 8300

# Create file systems on new partitions
mkfs.vfat -F32 /dev/sda1
mkfs.ext2 /dev/sda2

# Setup the encryption of the system
cryptsetup -c aes-xts-plain64 -y --use-random luksFormat /dev/sda3
cryptsetup luksOpen /dev/sda3 luks

# Create encrypted partitions
# This creates one partions for root and one for swap, modify if /home or other partitions should be on separate partitions
pvcreate /dev/mapper/luks
vgcreate vg0 /dev/mapper/luks
lvcreate --size 8G vg0 --name swap
lvcreate -l +100%FREE vg0 --name root

# Create filesystems on encrypted partitions
mkfs.ext4 /dev/mapper/vg0-root
mkswap /dev/mapper/vg0-swap

# Mount the new system 
mount /dev/mapper/vg0-root /mnt # /mnt is the installed system
swapon /dev/mapper/vg0-swap # Not needed but a good thing to test
mkdir /mnt/boot
mount /dev/sda2 /mnt/boot
mkdir /mnt/boot/efi
mount /dev/sda1 /mnt/boot/efi

# Install the system 
pacstrap /mnt base base-devel
# If after installation you can use only wireless connection you nesd to install some packages for this. Add 'iw wpa_supplicant dialog wpa_actiond' after 'base-devel'.

# Generate fstab
genfstab -pU /mnt >>/mnt/etc/fstab

# (Not nessesary). Check your fstab
cat /mnt/etc/fstab

# Enter the new system
arch-chroot /mnt 

# Set the hostname
echo MYHOSTNAME > /etc/hostname

# Setup system clock (choose your timezone)
rm /etc/localtime
ln -s /usr/share/zoneinfo/Europe/Moscow /etc/localtime
hwclock --systohc --utc

# Update locale (chhose your)
echo LANG=ru_RU.UTF-8 >> /etc/locale.conf
echo LC_MESSAGES=ru_RU.UTF-8 >> /etc/locale.conf

# Add locales (uncomment what you need)
nano /etc/locale.gen
#Uncomment
en_US.UTF-8
ru_RU.UTF-8
 Ctrl+x, yes, Enter

# Configure virtual console (paste your locale, keymap, timezone and console font)
nano /etc/vconsole.conf
# Paste
LOCALE="ru_RU.UTF-8"
KEYMAP="ru"
HARDWARECLOCK="UTC"
TIMEZONE="Europe/Moscow"
FONT="cyr-sun16"
CONSOLEFONT="cyr-sun16"
CONSOLEMAP=""
 Ctrl+x, yes, Enter

# Generate locale
locale-gen

# Set password for root
passwd

# Configure mkinitcpio with modules needed for the initrd image
nano /etc/mkinitcpio.conf
# Add 'ext4' to MODULES
# Add 'encrypt', 'lvm2' and ‘resume’ to HOOKS before filesystems
 Ctrl+x, yes, Enter

# Regenerate initrd image
mkinitcpio -p linux

# Setup grub
pacman -S grub efibootmgr
grub-install
nano /etc/default/grub edit the line GRUB_CMDLINE_LINUX to GRUB_CMDLINE_LINUX="cryptdevice=/dev/sda3:luks:allow-discards resume=/dev/mapper/vg0-swap" 
 Ctrl+x, yes, Enter
grub-mkconfig -o /boot/grub/grub.cfg



# Exit new system and go into the cd shell
exit

# Unmount all partitions
umount -R /mnt
swapoff -a

# Reboot into the new system, don't forget to remove the cd/usb
reboot

# INSTALLATION COMPLETE!

